<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>人是怎么废掉的</title>
    <url>/2022/04/15/%E4%BA%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%BA%9F%E6%8E%89%E7%9A%84/</url>
    <content><![CDATA[<p>你每天睡到自然醒，醒了刷视频玩游戏，等你饿的时候起床发现已经中午了，吃了个饭，继缓睡觉，下午醒了继续玩再吃饭，天天就这样过去了<br>你外貌不出众，能力不出众，家庭不出众却心比天高明明自己狗屁不是，却谁都看不上，每天羡慕别人的生活，羡慕别人的爱情，幻想自己也能拥有一切。<br>清醒点吧，能从低谷中拔出来的从来都不是时间而是你心里的格局。<br>你可以消沉抱怨甚至可以崩溃但一定要懂得自愈。努力，不为别人，只为做一个让自己都羡慕的人。</p>
]]></content>
  </entry>
  <entry>
    <title>“MySQL约束课堂笔记”</title>
    <url>/2022/04/18/MySQL%E7%BA%A6%E6%9D%9F%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. DQL:查询语句
    1. 排序查询
    2. 聚合函数
    3. 分组查询
    4. 分页查询

2. 约束
3. 多表之间的关系
4. 范式
5. 数据库的备份和还原
</code></pre>
<span id="more"></span>
<h1 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h1><pre><code>1. 排序查询
    * 语法：order by 子句
        * order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...

    * 排序方式：
        * ASC：升序，默认的。
        * DESC：降序。

    * 注意：
        * 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。


2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。
    1. count：计算个数
        1. 一般选择非空的列：主键
        2. count(*)
    2. max：计算最大值
    3. min：计算最小值
    4. sum：计算和
    5. avg：计算平均值
    

    * 注意：聚合函数的计算，排除null值。
        解决方案：
            1. 选择不包含非空的列进行计算
            2. IFNULL函数

3. 分组查询:
    1. 语法：group by 分组字段；
    2. 注意：
        1. 分组之后查询的字段：分组字段、聚合函数
        2. where 和 having 的区别？
            1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来
            2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。

        -- 按照性别分组。分别查询男、女同学的平均分

        SELECT sex , AVG(math) FROM student GROUP BY sex;
        
        -- 按照性别分组。分别查询男、女同学的平均分,人数
        
        SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;
        
        --  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组
        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;
        
        --  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人
        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;
        
        SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;


        
4. 分页查询
    1. 语法：limit 开始的索引,每页查询的条数;
    2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数
        -- 每页显示3条记录 

        SELECT * FROM student LIMIT 0,3; -- 第1页
        
        SELECT * FROM student LIMIT 3,3; -- 第2页
        
        SELECT * FROM student LIMIT 6,3; -- 第3页

    3. limit 是一个MySQL&quot;方言&quot;
</code></pre>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><pre><code>* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    
* 分类：
    1. 主键约束：primary key
    2. 非空约束：not null
    3. 唯一约束：unique
    4. 外键约束：foreign key

* 非空约束：not null，某一列的值不能为null
    1. 创建表时添加约束
        CREATE TABLE stu(
            id INT,
            NAME VARCHAR(20) NOT NULL -- name为非空
        );
    2. 创建表完后，添加非空约束
        ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;

    3. 删除name的非空约束
        ALTER TABLE stu MODIFY NAME VARCHAR(20);

* 唯一约束：unique，某一列的值不能重复
    1. 注意：
        * 唯一约束可以有NULL值，但是只能有一条记录为null
    2. 在创建表时，添加唯一约束
        CREATE TABLE stu(
            id INT,
            phone_number VARCHAR(20) UNIQUE -- 手机号
        );
    3. 删除唯一约束
        ALTER TABLE stu DROP INDEX phone_number;
    4. 在表创建完后，添加唯一约束
        ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;

* 主键约束：primary key。
    1. 注意：
        1. 含义：非空且唯一
        2. 一张表只能有一个字段为主键
        3. 主键就是表中记录的唯一标识

    2. 在创建表时，添加主键约束
        create table stu(
            id int primary key,-- 给id添加主键约束
            name varchar(20)
        );

    3. 删除主键
        -- 错误 alter table stu modify id int ;
        ALTER TABLE stu DROP PRIMARY KEY;

    4. 创建完表后，添加主键
        ALTER TABLE stu MODIFY id INT PRIMARY KEY;

    5. 自动增长：
        1.  概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长

        2. 在创建表时，添加主键约束，并且完成主键自增长
        create table stu(
            id int primary key auto_increment,-- 给id添加主键约束
            name varchar(20)
        );

        
        3. 删除自动增长
        ALTER TABLE stu MODIFY id INT;
        4. 添加自动增长
        ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;


* 外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。
    1. 在创建表时，可以添加外键
        * 语法：
            create table 表名(
                ....
                外键列
                constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)
            );

    2. 删除外键
        ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;

    3. 创建表之后，添加外键
        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);
    
    
    4. 级联操作
        1. 添加级联操作
            语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 
                    FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;
        2. 分类：
            1. 级联更新：ON UPDATE CASCADE 
            2. 级联删除：ON DELETE CASCADE 
</code></pre>
<h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><pre><code>1. 多表之间的关系
    1. 分类：
        1. 一对一(了解)：
            * 如：人和身份证
            * 分析：一个人只有一个身份证，一个身份证只能对应一个人
        2. 一对多(多对一)：
            * 如：部门和员工
            * 分析：一个部门有多个员工，一个员工只能对应一个部门
        3. 多对多：
            * 如：学生和课程
            * 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择
    2. 实现关系：
        1. 一对多(多对一)：
            * 如：部门和员工
            * 实现方式：在多的一方建立外键，指向一的一方的主键。
        2. 多对多：
            * 如：学生和课程
            * 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键
        3. 一对一(了解)：
            * 如：人和身份证
            * 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。

    3. 案例
        -- 创建旅游线路分类表 tab_category
        -- cid 旅游线路分类主键，自动增长
        -- cname 旅游线路分类名称非空，唯一，字符串 100
        CREATE TABLE tab_category (
            cid INT PRIMARY KEY AUTO_INCREMENT,
            cname VARCHAR(100) NOT NULL UNIQUE
        );
        
        -- 创建旅游线路表 tab_route
        /*
        rid 旅游线路主键，自动增长
        rname 旅游线路名称非空，唯一，字符串 100
        price 价格
        rdate 上架时间，日期类型
        cid 外键，所属分类
        */
        CREATE TABLE tab_route(
            rid INT PRIMARY KEY AUTO_INCREMENT,
            rname VARCHAR(100) NOT NULL UNIQUE,
            price DOUBLE,
            rdate DATE,
            cid INT,
            FOREIGN KEY (cid) REFERENCES tab_category(cid)
        );
        
        /*创建用户表 tab_user
        uid 用户主键，自增长
        username 用户名长度 100，唯一，非空
        password 密码长度 30，非空
        name 真实姓名长度 100
        birthday 生日
        sex 性别，定长字符串 1
        telephone 手机号，字符串 11
        email 邮箱，字符串长度 100
        */
        CREATE TABLE tab_user (
            uid INT PRIMARY KEY AUTO_INCREMENT,
            username VARCHAR(100) UNIQUE NOT NULL,
            PASSWORD VARCHAR(30) NOT NULL,
            NAME VARCHAR(100),
            birthday DATE,
            sex CHAR(1) DEFAULT &#39;男&#39;,
            telephone VARCHAR(11),
            email VARCHAR(100)
        );
        
        /*
        创建收藏表 tab_favorite
        rid 旅游线路 id，外键
        date 收藏时间
        uid 用户 id，外键
        rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次
        */
        CREATE TABLE tab_favorite (
            rid INT, -- 线路id
            DATE DATETIME,
            uid INT, -- 用户id
            -- 创建复合主键
            PRIMARY KEY(rid,uid), -- 联合主键
            FOREIGN KEY (rid) REFERENCES tab_route(rid),
            FOREIGN KEY(uid) REFERENCES tab_user(uid)
        );

    
2. 数据库设计的范式
    * 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求

        设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。
        目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。

    * 分类：
        1. 第一范式（1NF）：每一列都是不可分割的原子数据项
        2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）
            * 几个概念：
                1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A
                    例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数
                2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。
                    例如：（学号，课程名称） --&gt; 分数
                3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。
                    例如：（学号，课程名称） -- &gt; 姓名
                4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A
                    例如：学号--&gt;系名，系名--&gt;系主任
                5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码
                    例如：该表中码为：（学号，课程名称）
                    * 主属性：码属性组中的所有属性
                    * 非主属性：除过码属性组的属性
                    
        3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）
</code></pre>
<h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><pre><code>1. 命令行：
    * 语法：
        * 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径
        * 还原：
            1. 登录数据库
            2. 创建数据库
            3. 使用数据库
            4. 执行文件。source 文件路径
2. 图形化工具：
</code></pre>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础课堂笔记</title>
    <url>/2022/04/15/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><ol>
<li><p>数据库的基本概念</p>
<span id="more"></span>
</li>
<li><p>MySQL数据库软件</p>
<ol>
<li>安装</li>
<li>卸载</li>
<li>配置</li>
</ol>
</li>
<li><p>SQL</p>
</li>
</ol>
<h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><pre><code>1. 数据库的英文单词： DataBase 简称 ： DB
2. 什么数据库？
    * 用于存储和管理数据的仓库。

3. 数据库的特点：
    1. 持久化存储数据的。其实数据库就是一个文件系统
    2. 方便存储和管理数据
    3. 使用了统一的方式操作数据库 -- SQL


4. 常见的数据库软件
    * 参见《MySQL基础.pdf》
</code></pre>
<h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><pre><code>1. 安装
    * 参见《MySQL基础.pdf》
2. 卸载
    1. 去mysql的安装目录找到my.ini文件
        * 复制 datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;
    2. 卸载MySQL
    3. 删除C:/ProgramData目录下的MySQL文件夹。
    
3. 配置
    * MySQL服务启动
        1. 手动。
        2. cmd--&gt; services.msc 打开服务的窗口
        3. 使用管理员打开cmd
            * net start mysql : 启动mysql的服务
            * net stop mysql:关闭mysql服务
    * MySQL登录
        1. mysql -uroot -p密码
        2. mysql -hip -uroot -p连接目标的密码
        3. mysql --host=ip --user=root --password=连接目标的密码
    * MySQL退出
        1. exit
        2. quit

    * MySQL目录结构
        1. MySQL安装目录：basedir=&quot;D:/develop/MySQL/&quot;
            * 配置文件 my.ini
        2. MySQL数据目录：datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;
            * 几个概念
                * 数据库：文件夹
                * 表：文件
                * 数据：数据
</code></pre>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><pre><code>1.什么是SQL？
    Structured Query Language：结构化查询语言
    其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。
    
2.SQL通用语法
    1. SQL 语句可以单行或多行书写，以分号结尾。
    2. 可使用空格和缩进来增强语句的可读性。
    3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。
    4. 3 种注释
        * 单行注释: -- 注释内容 或 # 注释内容(mysql 特有) 
        * 多行注释: /* 注释 */
    
3. SQL分类
    1) DDL(Data Definition Language)数据定义语言
        用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等
    2) DML(Data Manipulation Language)数据操作语言
        用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等
    3) DQL(Data Query Language)数据查询语言
        用来查询数据库中表的记录(数据)。关键字：select, where 等
    4) DCL(Data Control Language)数据控制语言(了解)
        用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等
</code></pre>
<h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><pre><code>1. 操作数据库：CRUD
    1. C(Create):创建
        * 创建数据库：
            * create database 数据库名称;
        * 创建数据库，判断不存在，再创建：
            * create database if not exists 数据库名称;
        * 创建数据库，并指定字符集
            * create database 数据库名称 character set 字符集名;

        * 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk
            * create database if not exists db4 character set gbk;
    2. R(Retrieve)：查询
        * 查询所有数据库的名称:
            * show databases;
        * 查询某个数据库的字符集:查询某个数据库的创建语句
            * show create database 数据库名称;
    3. U(Update):修改
        * 修改数据库的字符集
            * alter database 数据库名称 character set 字符集名称;
    4. D(Delete):删除
        * 删除数据库
            * drop database 数据库名称;
        * 判断数据库存在，存在再删除
            * drop database if exists 数据库名称;
    5. 使用数据库
        * 查询当前正在使用的数据库名称
            * select database();
        * 使用数据库
            * use 数据库名称;


2. 操作表
    1. C(Create):创建
        1. 语法：
            create table 表名(
                列名1 数据类型1,
                列名2 数据类型2,
                ....
                列名n 数据类型n
            );
            * 注意：最后一列，不需要加逗号（,）
            * 数据库类型：
                1. int：整数类型
                    * age int,
                2. double:小数类型
                    * score double(5,2)
                3. date:日期，只包含年月日，yyyy-MM-dd
                4. datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss
                5. timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    
                    * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值

                6. varchar：字符串
                    * name varchar(20):姓名最大20个字符
                    * zhangsan 8个字符  张三 2个字符
            

        * 创建表
            create table student(
                id int,
                name varchar(32),
                age int ,
                score double(4,1),
                birthday date,
                insert_time timestamp
            );
        * 复制表：
            * create table 表名 like 被复制的表名;          
    2. R(Retrieve)：查询
        * 查询某个数据库中所有的表名称
            * show tables;
        * 查询表结构
            * desc 表名;
    3. U(Update):修改
        1. 修改表名
            alter table 表名 rename to 新的表名;
        2. 修改表的字符集
            alter table 表名 character set 字符集名称;
        3. 添加一列
            alter table 表名 add 列名 数据类型;
        4. 修改列名称 类型
            alter table 表名 change 列名 新列别 新数据类型;
            alter table 表名 modify 列名 新数据类型;
        5. 删除列
            alter table 表名 drop 列名;
    4. D(Delete):删除
        * drop table 表名;
        * drop table  if exists 表名 ;
</code></pre>
<ul>
<li>客户端图形化工具：SQLYog</li>
</ul>
<h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><pre><code>1. 添加数据：
    * 语法：
        * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);
    * 注意：
        1. 列名和值要一一对应。
        2. 如果表名后，不定义列名，则默认给所有列添加值
            insert into 表名 values(值1,值2,...值n);
        3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来
2. 删除数据：
    * 语法：
        * delete from 表名 [where 条件]
    * 注意：
        1. 如果不加条件，则删除表中所有记录。
        2. 如果要删除所有记录
            1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作
            2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。
3. 修改数据：
    * 语法：
        * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];

    * 注意：
        1. 如果不加任何条件，则会将表中所有记录全部修改。
</code></pre>
<h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><pre><code>* select * from 表名;

1. 语法：
    select
        字段列表
    from
        表名列表
    where
        条件列表
    group by
        分组字段
    having
        分组之后的条件
    order by
        排序
    limit
        分页限定


2. 基础查询
    1. 多个字段的查询
        select 字段名1，字段名2... from 表名；
        * 注意：
            * 如果查询所有字段，则可以使用*来替代字段列表。
    2. 去除重复：
        * distinct
    3. 计算列
        * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）
        * ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null
            * 表达式1：哪个字段需要判断是否为null
            * 如果该字段为null后的替换值。
    4. 起别名：
        * as：as也可以省略
        

3. 条件查询
    1. where子句后跟条件
    2. 运算符
        * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;
        * BETWEEN...AND  
        * IN( 集合) 
        * LIKE：模糊查询
            * 占位符：
                * _:单个任意字符
                * %：多个任意字符
        * IS NULL  
        * and  或 &amp;&amp;
        * or  或 || 
        * not  或 !
        
            -- 查询年龄大于20岁

            SELECT * FROM student WHERE age &gt; 20;
            
            SELECT * FROM student WHERE age &gt;= 20;
            
            -- 查询年龄等于20岁
            SELECT * FROM student WHERE age = 20;
            
            -- 查询年龄不等于20岁
            SELECT * FROM student WHERE age != 20;
            SELECT * FROM student WHERE age &lt;&gt; 20;
            
            -- 查询年龄大于等于20 小于等于30
            
            SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;
            SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;
            SELECT * FROM student WHERE age BETWEEN 20 AND 30;
            
            -- 查询年龄22岁，18岁，25岁的信息
            SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25
            SELECT * FROM student WHERE age IN (22,18,25);
            
            -- 查询英语成绩为null
            SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断
            
            SELECT * FROM student WHERE english IS NULL;
            
            -- 查询英语成绩不为null
            SELECT * FROM student WHERE english  IS NOT NULL;



            -- 查询姓马的有哪些？ like
            SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;
            -- 查询姓名第二个字是化的人
            
            SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;
            
            -- 查询姓名是3个字的人
            SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;
            
            
            -- 查询姓名中包含德的人
            SELECT * FROM student WHERE NAME LIKE &#39;%德%&#39;;
</code></pre>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>反射。注解。</title>
    <url>/2022/04/11/%E5%8F%8D%E5%B0%84%E3%80%82%E6%B3%A8%E8%A7%A3%E3%80%82/</url>
    <content><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. Junit单元测试
2. 反射
3. 注解
</code></pre>
<span id="more"></span>
<h2 id="Junit单元测试："><a href="#Junit单元测试：" class="headerlink" title="Junit单元测试："></a>Junit单元测试：</h2><pre><code>* 测试分类：
    1. 黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。
    2. 白盒测试：需要写代码的。关注程序具体的执行流程。

* Junit使用：白盒测试
    * 步骤：
        1. 定义一个测试类(测试用例)
            * 建议：
                * 测试类名：被测试的类名Test        CalculatorTest
                * 包名：xxx.xxx.xx.test        cn.itcast.test

        2. 定义测试方法：可以独立运行
            * 建议：
                * 方法名：test测试的方法名        testAdd()  
                * 返回值：void
                * 参数列表：空参

        3. 给方法加@Test
        4. 导入junit依赖环境

    * 判定结果：
        * 红色：失败
        * 绿色：成功
        * 一般我们会使用断言操作来处理结果
            * Assert.assertEquals(期望的结果,运算的结果);

    * 补充：
        * @Before:
            * 修饰的方法会在测试方法之前被自动执行
        * @After:
            * 修饰的方法会在测试方法执行之后自动被执行
</code></pre>
<h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><pre><code>* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码
* 反射：将类的各个组成部分封装为其他对象，这就是反射机制
    * 好处：
        1. 可以在程序运行过程中，操作这些对象。
        2. 可以解耦，提高程序的可扩展性。


* 获取Class对象的方式：
    1. Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class对象
        * 多用于配置文件，将类名定义在配置文件中。读取文件，加载类
    2. 类名.class：通过类名的属性class获取
        * 多用于参数的传递
    3. 对象.getClass()：getClass()方法在Object类中定义着。
        * 多用于对象的获取字节码的方式

    * 结论：
        同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。


* Class对象功能：
    * 获取功能：
        1. 获取成员变量们
            * Field[] getFields() ：获取所有public修饰的成员变量
            * Field getField(String name)   获取指定名称的 public修饰的成员变量

            * Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符
            * Field getDeclaredField(String name)  
        2. 获取构造方法们
            * Constructor&lt;?&gt;[] getConstructors()  
            * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)  

            * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)  
            * Constructor&lt;?&gt;[] getDeclaredConstructors()  
        3. 获取成员方法们：
            * Method[] getMethods()  
            * Method getMethod(String name, 类&lt;?&gt;... parameterTypes)  

            * Method[] getDeclaredMethods()  
            * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)  

        4. 获取全类名    
            * String getName()  


* Field：成员变量
    * 操作：
        1. 设置值
            * void set(Object obj, Object value)  
        2. 获取值
            * get(Object obj) 

        3. 忽略访问权限修饰符的安全检查
            * setAccessible(true):暴力反射



* Constructor:构造方法
    * 创建对象：
        * T newInstance(Object... initargs)  

        * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法


* Method：方法对象
    * 执行方法：
        * Object invoke(Object obj, Object... args)  

    * 获取方法名称：
        * String getName:获取方法名


* 案例：
    * 需求：写一个&quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法
        * 实现：
            1. 配置文件
            2. 反射
        * 步骤：
            1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中
            2. 在程序中加载读取配置文件
            3. 使用反射技术来加载类文件进内存
            4. 创建对象
            5. 执行方法
</code></pre>
<h2 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h2><pre><code>* 概念：说明程序的。给计算机看的
* 注释：用文字描述程序的。给程序员看的

* 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。
* 概念描述：
    * JDK1.5之后的新特性
    * 说明程序的
    * 使用注解：@注解名称
    

* 作用分类：
    ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】
    ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】
    ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】


* JDK中预定义的一些注解
    * @Override    ：检测被该注解标注的方法是否是继承自父类(接口)的
    * @Deprecated：该注解标注的内容，表示已过时
    * @SuppressWarnings：压制警告
        * 一般传递参数all  @SuppressWarnings(&quot;all&quot;)

* 自定义注解
    * 格式：
        元注解
        public @interface 注解名称&#123;
            属性列表;
        &#125;

    * 本质：注解本质上就是一个接口，该接口默认继承Annotation接口
        * public interface annotation.MyAnno extends java.lang.annotation.Annotation &#123;&#125;

    * 属性：接口中的抽象方法
        * 要求：
            1. 属性的返回值类型有下列取值
                * 基本数据类型
                * String
                * 枚举
                * 注解
                * 以上类型的数组

            2. 定义了属性，在使用时需要给属性赋值
                1. 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。
                2. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。
                3. 数组赋值时，值使用&#123;&#125;包裹。如果数组中只有一个值，则&#123;&#125;可以省略
    
    * 元注解：用于描述注解的注解
        * @Target：描述注解能够作用的位置
            * ElementType取值：
                * TYPE：可以作用于类上
                * METHOD：可以作用于方法上
                * FIELD：可以作用于成员变量上
        * @Retention：描述注解被保留的阶段
            * @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
        * @Documented：描述注解是否被抽取到api文档中
        * @Inherited：描述注解是否被子类继承


* 在程序使用(解析)注解：获取注解中定义的属性值
    1. 获取注解定义的位置的对象  （Class，Method,Field）
    2. 获取指定的注解
        * getAnnotation(Class)
        //其实就是在内存中生成了一个该注解接口的子类实现对象

                public class ProImpl implements Pro&#123;
                    public String className()&#123;
                        return &quot;cn.itcast.annotation.pro&quot;;
                    &#125;
                    public String methodName()&#123;
                        return &quot;show&quot;;
                    &#125;
                &#125;
    3. 调用注解中的抽象方法获取配置的属性值


* 案例：简单的测试框架
* 小结：
    1. 以后大多数时候，我们会使用注解，而不是自定义注解
    2. 注解给谁用？
        1. 编译器
        2. 给解析程序用
    3. 注解不是程序的一部分，可以理解为注解就是一个标签
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的常用命令和vim编辑器</title>
    <url>/2022/04/06/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p><code>提示：以下是本篇文章正文内容，下面案例可供参考</code></p>
<h1 id="一、Linux的常用命令"><a href="#一、Linux的常用命令" class="headerlink" title="一、Linux的常用命令"></a>一、Linux的常用命令<span id="more"></span></h1><h2 id="1-切换目录命令cd："><a href="#1-切换目录命令cd：" class="headerlink" title="1.切换目录命令cd："></a>1.切换目录命令cd：</h2><p>  使用cd app    切换到app目录cd ..    切换到上一层目录cd &#x2F;        切换到系统根目录cd ~        切换到用户主目录cd -        切换到上一个所在目录</p>
<p>使用tab键来补全文件路径</p>
<h2 id="2．列出文件列表：ls-ll"><a href="#2．列出文件列表：ls-ll" class="headerlink" title="2．列出文件列表：ls ll"></a>2．列出文件列表：ls ll</h2><p>ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容。    格式：ls[参数] [路径或文件名]<br>常用：<br>在linux中以 . 开头的文件都是隐藏的文件</p>
<ul>
<li>ls</li>
<li>ls -a  显示所有文件或目录（包含隐藏的文件）</li>
<li>ls -l  缩写成ll</li>
</ul>
<h2 id="3．创建目录和移除目录：mkdir-rmdir"><a href="#3．创建目录和移除目录：mkdir-rmdir" class="headerlink" title="3．创建目录和移除目录：mkdir rmdir"></a>3．创建目录和移除目录：mkdir rmdir</h2><p>mkdir(make directory)命令可用来创建子目录。mkdir app    在当前目录下创建app目录mkdir –p app2&#x2F;test   级联创建aap2以及test目</p>
<p>rmdir(remove directory)命令可用来删除“空”的子目录：rmdir app    删除app目录</p>
<h2 id="4．浏览文件"><a href="#4．浏览文件" class="headerlink" title="4．浏览文件"></a>4．浏览文件</h2><h3 id="【cat、more、less】"><a href="#【cat、more、less】" class="headerlink" title="【cat、more、less】"></a>【cat、more、less】</h3><p>cat用于显示文件的内容。格式：cat[参数]&lt;文件名&gt;</p>
<pre><code>* cat yum.conf
</code></pre>
<p>more一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。<br>回车显示下一行内容。<br>按 q 键退出查看。</p>
<ul>
<li>more yum.conf<ul>
<li>空格显示下一页数据  回车显示下一行的数据<br>less用法和more类似，不同的是less可以通过PgUp、PgDn键来控制。</li>
<li>less yum.conf<ul>
<li>PgUp 和 PgDn 进行上下翻页.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="【tail】"><a href="#【tail】" class="headerlink" title="【tail】"></a>【tail】</h3><p>tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。<br>用法:<br>tail -10 &#x2F;etc&#x2F;passwd    查看后10行数据<br>tail -f catalina.log    动态查看日志(*****)<br>ctrl+c 结束查看</p>
<h2 id="5．文件操作："><a href="#5．文件操作：" class="headerlink" title="5．文件操作："></a>5．文件操作：</h2><h3 id="【rm】"><a href="#【rm】" class="headerlink" title="【rm】"></a>【rm】</h3><p>rm  删除文件<br>用法：rm [选项]… 文件…<br>rm a.txt    删除a.txt文件<br>删除需要用户确认，y&#x2F;nrm 删除不询问<br>rm -f a.txt    不询问，直接删除rm 删除目录<br>rm -r a    递归删除不询问递归删除（慎用）<br>rm -rf  a    不询问递归删除<br>rm -rf *      删除所有文件<br>rm -rf &#x2F;*      自杀</p>
<h3 id="【cp、mv】"><a href="#【cp、mv】" class="headerlink" title="【cp、mv】"></a>【cp、mv】</h3><p>cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。<br>cp a.txt b.txt    将a.txt复制为b.txt文件<br>cp a.txt.&#x2F;    将a.txt文件复制到上一层目录中</p>
<p>mv 移动或者重命名<br>mv a.txt ..&#x2F;    将a.txt文件移动到上一层目录中<br>mv a.txt b.txt    将a.txt文件重命名为b.txt</p>
<h3 id="【tar】命令-打包或解压"><a href="#【tar】命令-打包或解压" class="headerlink" title="【tar】命令:(***** 打包或解压)"></a>【tar】命令:(***** 打包或解压)</h3><p>tar命令位于&#x2F;bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。常用参数：<br>-c：创建一个新tar文件<br>-v：显示运行过程的信息<br>-f：指定文件名<br>-z：调用gzip压缩命令进行压缩<br>-t：查看压缩文件的内容<br>-x：解开tar文件</p>
<p>打包：<br>tar –cvf xxx.tar .&#x2F;*<br>打包并且压缩：<br>tar –zcvf xxx.tar.gz .&#x2F;*<br>解压<br>     tar –xvf xxx.tar<br>tar -zxvf xxx.tar.gz -C &#x2F;usr&#x2F;aaa</p>
<h2 id="6．其他常用命令"><a href="#6．其他常用命令" class="headerlink" title="6．其他常用命令"></a>6．其他常用命令</h2><h3 id="【pwd】"><a href="#【pwd】" class="headerlink" title="【pwd】"></a>【pwd】</h3><p>显示当前所在目录</p>
<h3 id="【touch】"><a href="#【touch】" class="headerlink" title="【touch】"></a>【touch】</h3><p>创建一个空文件</p>
<ul>
<li>touch a.txt<h3 id="【clear-x2F-crtl-L】"><a href="#【clear-x2F-crtl-L】" class="headerlink" title="【clear&#x2F; crtl + L】"></a>【clear&#x2F; crtl + L】</h3>清屏</li>
</ul>
<h1 id="二、Vi和Vim编辑器"><a href="#二、Vi和Vim编辑器" class="headerlink" title="二、Vi和Vim编辑器"></a>二、Vi和Vim编辑器</h1><h2 id="1-Vim编辑器："><a href="#1-Vim编辑器：" class="headerlink" title="1.Vim编辑器："></a>1.Vim编辑器：</h2><p>在Linux下一般使用vi编辑器来编辑文件。vi既可以查看文件也可以编辑文件。三种模式：命令行、插入、底行模式。<br>切换到命令行模式：按Esc键；<br>切换到插入模式：按 i 、o、a键；<br>    i 在当前位置前插入<br>    I 在当前行首插入<br>    a 在当前位置后插入<br>    A 在当前行尾插入<br>    o 在当前行之后插入一行<br>    O 在当前行之前插入一行</p>
<p>切换到底行模式：按 :（冒号）；更多详细用法，查询文档《Vim命令合集.docx》和《vi使用方法详细介绍.docx》</p>
<p>打开文件：vim file<br>退出：esc  :q<br>修改文件：输入i进入插入模式<br>保存并退出：esc:wq</p>
<p>不保存退出：esc:q!</p>
<p>三种进入插入模式：<br>i:在当前的光标所在处插入<br>o:在当前光标所在的行的下一行插入<br>a:在光标所在的下一个字符插入</p>
<p>快捷键：<br>dd – 快速删除一行<br>yy - 复制当前行<br>nyy - 从当前行向后复制几行<br>p - 粘贴<br>R – 替换</p>
<h2 id="2．重定向输出-gt-和-gt-gt"><a href="#2．重定向输出-gt-和-gt-gt" class="headerlink" title="2．重定向输出&gt;和&gt;&gt;"></a>2．重定向输出&gt;和&gt;&gt;</h2><blockquote>
<p> 重定向输出，覆盖原有内容；&gt;&gt; 重定向输出，又追加功能；示例：<br>cat &#x2F;etc&#x2F;passwd &gt; a.txt  将输出定向到a.txt中<br>cat &#x2F;etc&#x2F;passwd &gt;&gt; a.txt  输出并且追加</p>
</blockquote>
<p>ifconfig &gt; ifconfig.txt</p>
<h2 id="3．系统管理命令"><a href="#3．系统管理命令" class="headerlink" title="3．系统管理命令"></a>3．系统管理命令</h2><p>ps 正在运行的某个进程的状态<br>ps –ef  查看所有进程<br>ps –ef | grep ssh 查找某一进程<br>kill 2868  杀掉2868编号的进程<br>kill -9 2868  强制杀死进程</p>
<h2 id="4．管道"><a href="#4．管道" class="headerlink" title="4．管道 |"></a>4．管道 |</h2><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。示例<br>ls –help | more  分页查询帮助信息<br>ps –ef | grep java  查询名称中包含java的进程</p>
<p>ifconfig | more<br>cat index.html | more<br>ps –ef | grep aio</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>提示：这里对文章进行总结：<br>例如：以上就是今天要讲的内容，本文仅仅简单介绍了Linux常用指令的使用。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>风过，云逝，衔觞，乐志。</title>
    <url>/2022/04/06/%E9%A3%8E%E8%BF%87%EF%BC%8C%E4%BA%91%E9%80%9D%EF%BC%8C%E8%A1%94%E8%A7%9E%EF%BC%8C%E4%B9%90%E5%BF%97%E3%80%82/</url>
    <content><![CDATA[<p>风过，云逝，衔觞，乐志。<br>　　花开，夜半，风过，天寒，跨驹上鞍，流离天涯之远，只为那美的不凡。自然的美，永远那么壮<br>阔，又那么细腻，那么令人陶醉。<br>　　夕阳斜，虽黄昏，却也无限美好，点点的金色笼罩着万物。每个事物舍去了本色承接着那最后的温<br>暖与辉煌。一盏清茶香气四溢，开阖，观六合之境，赏八荒之美，想必也会三月不知肉味吧。曹操曾高<br>歌：“何以解忧？唯有杜康。”而如今我却以为，感受自然，体会着生生不息，领略着千变万化之景，<br>也必忘却了忧，不见了愁吧。</p>
<span id="more"></span>
<p>　　亭前花盛，转眼间，又随风而逝，远去的瓣，扬扬洒洒，荡在穹庐之下，荡在地宇之上，静美，安<br>适。终也零落成了泥又碾作了尘，却也依旧芬芳如故。远去了辙，敞开了阖，风扬的歌，却不见花开<br>过，繁花盛而不娇，独自芬芳，带着芗，零乱了之后不为人所忆，不为人所赞，却也不恼，也不怨，护<br>着来日再盛的花，却不与人谔谔，这一份淡泊，一份无私，也正是自然给予的一份心境。<br>　　有人唱：“花开花落日复日，半醉半醒年复年。”也有人疑：“江畔何人初见月，江月何年初照<br>人？”更说出了“人生代代无穷已，江月年年只相似”的佳句。一壶酒，醉了心；一纸墨，芬芳了千<br>载；一轮月，却映照了万代。清风拂面，把酒临风，而或陶醉欣喜，却又有时，半面遮，独自悲伤。道<br>可道，非常道，名可名，非常名。”这份体会，这感受自然的心只有自己能品味吧。<br>　　“苍山如海，残阳似血”的壮阔，“何事长向别时圆”的惆怅，也是对自然的感触。对瓦砌玉雕的<br>欣赏和赏之琼瑶的欣然，不论望之纸鹞，不论赞深渊腾蛟都不及赏自然之美而不娇，广而不寥。<br>　　夜半，天寒，星火舞动飞溅，曲终了，断瑶弦，跨驹上鞍，流离天涯之远，半世狂癫，月盈间，举<br>目望，望问天，一壶酒，自斟筵。转瞬间，雨打过，杂乱了屋檐；风吹过，远送了南雁。而后却又雨过<br>天晴，花枝摺中自寻乐。又感叹夏花的绚烂，感伤秋叶的静美。感动于自然的美。<br>　　淡淡的风吹散了淡淡的云，淡淡的花四溢着淡淡的香，冬雪在时光匆匆间融化成了点滴的泪。不知<br>是在伤感这逝去的冬，还是因将至的春，喜极而泣。自然的情感是丰富的，是淡然中独特的体会。<br>　　人走过，太匆匆，纷繁乱世间，人们拾起了什么，又忘却了什么……<br>　　至人无己，神人无功，圣人无名，但愿人们忘却了自己，忘记了功名，却也不忘自然纷繁乱世间，<br>谁乱了眼，醉了心。感受着自然，感受着花盛纷繁，清风拂面，圆月生怜。同时又忘却了忧，忘记了<br>愁。最终赞叹，自然的美永远那么壮阔，那么细腻，那么值得感受。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
